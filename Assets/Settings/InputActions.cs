//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Model"",
            ""id"": ""24583255-df13-489a-b312-fce6f0edae39"",
            ""actions"": [
                {
                    ""name"": ""Create"",
                    ""type"": ""Button"",
                    ""id"": ""56abaf36-32f5-4de0-9f6b-d6c318f9398b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""0ade981a-98f0-4b62-ad40-d4ae17719f3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02269d7c-de21-4fa1-a65f-ca100d574493"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Create"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4241b45-48d3-41e3-b0d5-1c65b6094478"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Model
        m_Model = asset.FindActionMap("Model", throwIfNotFound: true);
        m_Model_Create = m_Model.FindAction("Create", throwIfNotFound: true);
        m_Model_Delete = m_Model.FindAction("Delete", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Model
    private readonly InputActionMap m_Model;
    private IModelActions m_ModelActionsCallbackInterface;
    private readonly InputAction m_Model_Create;
    private readonly InputAction m_Model_Delete;
    public struct ModelActions
    {
        private @InputActions m_Wrapper;
        public ModelActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Create => m_Wrapper.m_Model_Create;
        public InputAction @Delete => m_Wrapper.m_Model_Delete;
        public InputActionMap Get() { return m_Wrapper.m_Model; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModelActions set) { return set.Get(); }
        public void SetCallbacks(IModelActions instance)
        {
            if (m_Wrapper.m_ModelActionsCallbackInterface != null)
            {
                @Create.started -= m_Wrapper.m_ModelActionsCallbackInterface.OnCreate;
                @Create.performed -= m_Wrapper.m_ModelActionsCallbackInterface.OnCreate;
                @Create.canceled -= m_Wrapper.m_ModelActionsCallbackInterface.OnCreate;
                @Delete.started -= m_Wrapper.m_ModelActionsCallbackInterface.OnDelete;
                @Delete.performed -= m_Wrapper.m_ModelActionsCallbackInterface.OnDelete;
                @Delete.canceled -= m_Wrapper.m_ModelActionsCallbackInterface.OnDelete;
            }
            m_Wrapper.m_ModelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Create.started += instance.OnCreate;
                @Create.performed += instance.OnCreate;
                @Create.canceled += instance.OnCreate;
                @Delete.started += instance.OnDelete;
                @Delete.performed += instance.OnDelete;
                @Delete.canceled += instance.OnDelete;
            }
        }
    }
    public ModelActions @Model => new ModelActions(this);
    public interface IModelActions
    {
        void OnCreate(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
    }
}
